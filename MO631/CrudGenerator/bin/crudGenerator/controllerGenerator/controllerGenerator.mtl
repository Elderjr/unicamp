[comment encoding = UTF-8 /]
[module controllerGenerator('http://www.example.org/springModelMof')]


[template public controllerGenerator(entity : CrudEntity)]
[file (entity.packageRoot.replaceAll('\\.','/') + '/controllers/' + entity.name + 'Controller.java', false, 'UTF-8')]

package [entity.packageRoot/].controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import [entity.packageRoot/].services.*;
import [entity.packageRoot/].models.*;
import util.Response;

@RestController
public class [entity.name/]Controller {

	@Autowired
	[entity.name/]Service [entity.name.toLowerCase()/]Service;
	
	@RequestMapping(method = RequestMethod.GET, value="[entity.name.toLowerCase()/]/get/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public [entity.name/] getById(@PathVariable Integer id) {
		return this.[entity.name.toLowerCase()/]Service.getRepository().findOne(id);
	}
	
	@RequestMapping(method = RequestMethod.DELETE, value="[entity.name.toLowerCase()/]/delete/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Response> delete(@PathVariable Integer id) {
		[entity.name/] [entity.name.toLowerCase()/] = this.[entity.name.toLowerCase()/]Service.getRepository().findOne(id);
		if([entity.name.toLowerCase()/] != null) {
            Response response = [entity.name/]Validator.deleteValidation([entity.name.toLowerCase()/]);
            if(response.isSuccess()){
              [entity.name.toLowerCase()/]Service.getRepository().delete([entity.name.toLowerCase()/]);
              response.setMessage("Entity [entity.name.toLowerCase()/] deleted with success");
              return new ResponseEntity<Response>(response, HttpStatus.OK);
            }
			return new ResponseEntity<Response>(response, HttpStatus.NOT_ACCEPTABLE);
		}
		return new ResponseEntity<Response>(new Response(false, "Could not found [entity.name.toLowerCase()/] with id "+id), HttpStatus.OK);
	}
	
	@RequestMapping(method = RequestMethod.POST, value="[entity.name.toLowerCase()/]/save", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Response> save(@RequestBody [entity.name/] [entity.name.toLowerCase()/]) {
        Response response = [entity.name/]Validator.saveValidation([entity.name.toLowerCase()/]);
        if(response.isSuccess()){
          [entity.registerLoop()/]
          personService.getRepository().save([entity.name.toLowerCase()/]);
          response.setMessage("[entity.name/] saved with success");
          return new ResponseEntity<Response>(response, HttpStatus.CREATED);
        }
		return new ResponseEntity<Response>(response, HttpStatus.NOT_ACCEPTABLE);
	}
}
[/file]
[/template]


[template private registerLoop(entity: Entity)]
[for (property : Property | entity.properties)]
[if (property.type.oclIsTypeOf(ReferenceType))]
[let type : ReferenceType = property.type.oclAsType(ReferenceType)]
[if (property.size = 1)]
[entity.name.toLowerFirst()/].get[type.entity/]().set[entity.name/]([entity.name.toLowerCase()/])[type.entity.registerLoop()/];[else]
for([type.entity.name/] [type.entity.name.toLowerCase()/] : [entity.name.toLowerCase()/].get[property.name.toUpperFirst()/]()){
  [type.entity.name.toLowerCase()/].set[entity.name/]([entity.name.toLowerCase()/]);
  [type.entity.registerLoop()/]
}[/if][/let][/if][/for]
[/template]